# Reference: https://rpubs.com/Argaadya/bayesian_ab

## Libraries ##
library(tidyverse)
library(gridExtra)
library(scales)

################### DATA INPUT ############################
###########################################################

## Traffic Data ##                                           
control_total_visits <- 13566                            
test_total_visits <- 13522                          
control_conversions <- 5980                              
test_conversions <- 6033                                 

## Priors ##                                              
prior_control_alpha <- 1                                  
prior_control_beta <- 1                                
prior_test_alpha <- 1                                   
prior_test_beta <- 1                                     
##################### DATA INPUT ##########################
###########################################################  

## Data Frame ##
control_non_conversions <- control_total_visits - control_conversions
test_non_conversions <- test_total_visits - test_conversions
control_conversion_rate <- control_conversions/control_total_visits
test_conversion_rate <- test_conversions/test_total_visits

df <- data.frame(group = c("control","treatment"),
                 total_visits = c(control_total_visits,test_total_visits),
                 conversions = c(control_conversions,test_conversions),
                 non_conversions = c(control_non_conversions,test_non_conversions),
                 conversion_rate = c(control_conversion_rate,test_conversion_rate))
df

## Prior ##
control_prior <- function(x) dbeta(x,prior_control_alpha,prior_control_beta) # creation of control prior beta distribution function that will be used to plot
test_prior <- function(x) dbeta(x,prior_test_alpha,prior_test_beta) # creation of prior test beta distribution function that will be used to plot

a <- ggplot() +                                      # plot prior distribution for the control
  geom_function(fun = control_prior,
                aes(color = "firebrick"),
                linewidth = 2) +
  theme_bw() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) +
  scale_x_continuous(labels = percent_format()) +
  labs(title = paste("Beta(",prior_control_alpha,",",prior_control_beta,")"),
       y = "Density",
       x = "Probability") 

b <- ggplot() +                                    # plot prior distribution for the test
  geom_function(fun = test_prior, 
                aes(color = "skyblue"),
                linewidth = 2) +
  theme_bw() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) +
  scale_x_continuous(labels = percent_format()) +
  labs(title = paste("Beta(",prior_test_alpha,",",prior_test_beta,")"),
       y = "Density",
       x = "Probability")


## Likelihood ##
likelihood_control_alpha <- df[1,3]     # likelihood of control alpha
likelihood_control_beta <- df[1,4]      # likelihood of control beta

likelihood_test_alpha <- df[2,3]  # likelihood of test alpha
likelihood_test_beta<- df[2,4]    # likelihood of test beta

likefun_control <- function(x) dbeta(x, likelihood_control_alpha, likelihood_control_beta) # creation of control likelihood beta distribution function that will be used to plot
likefun_test <- function(x) dbeta(x, likelihood_test_alpha,likelihood_test_beta)  # creation of test likelihood beta distribution function that will be used to plot

like_rbeta_control <- rbeta(1:10000,                              # pulling random values from likelihood control distribution to find median.  This is used in attempt to dynamically set xlim below.
                            likelihood_control_alpha,
                            likelihood_control_beta)
like_rbeta_test <- rbeta(1:10000,                                 # pulling random values from likelihood test distribution to find median.  This is used in attempt to dynamically set xlim below.
                         likelihood_test_alpha,
                         likelihood_test_beta)

median1 <- round(median(like_rbeta_control),2)
median2 <- round(median(like_rbeta_test),2)

m<-ggplot() +
  geom_function(fun = likefun_control,
                aes(color = "firebrick"),
                linewidth = 2) +
  theme_bw() +
  theme(legend.position = "none") +
  labs(title = paste("Beta(",likelihood_control_alpha,",",likelihood_control_beta,")",
                     " | Median = ",round(like_rbeta_control,4)),
       x = "Probability",
       y = "Density") +
  scale_x_continuous(
    limits = c(
      ifelse(median1 < median2,median1 - .03,median2 - .03),
      ifelse(median1 > median2,median1 + .03,median2 + .03)),
    breaks = seq(median1 -.04, median1 + .04,.01)) +
  scale_y_continuous(breaks = function(x) seq(0,range(x)[2], by =10))  # breaks ensures same x axis values as plot below (n)



n<-ggplot() +
  geom_function(fun = likefun_test,
                aes(color = "firebrick"),
                linewidth = 2) +
  theme_bw() +
  theme(legend.position = "none") +
  labs(title = paste("Beta(",likelihood_test_alpha,",",likelihood_test_beta,")",
                     " | Median = ",round(like_rbeta_test,4)),
       x = "Probability",
       y = "Density") + 
  scale_x_continuous(
    limits = c(
      ifelse(median1 < median2,median1 - .03,median2 - .03),
      ifelse(median1 > median2,median1 + .03,median2 + .03)),
    breaks = seq(median1 -.04, median1 + .04,.01)) +
  scale_y_continuous(breaks = function(x) seq(0,range(x)[2],by = 10))  # breaks ensures same x axis values as plot above (m)


## Posterior ##
fun_beta_control <- function(x) dbeta(x,                                               # creation of control posterior beta distribution function that will be used to plot
                                      prior_control_alpha + likelihood_control_alpha,
                                      prior_control_beta + likelihood_control_beta)
fun_beta_test <- function(x) dbeta(x,                                                  # creation of test posterior beta distribution function that will be used to plot
                                   prior_test_alpha + likelihood_test_alpha,
                                   prior_test_beta + likelihood_test_beta)

post_rbeta_control <- rbeta(1:10000,                                                   # pulling random values from likelihood control distribution to find median.  This is used in attempt to dynamically set xlim below.
                            prior_control_alpha + likelihood_control_alpha,
                            prior_control_beta + likelihood_control_beta)
post_rbeta_test <- rbeta(1:10000,                                                      # pulling random values from likelihood control distribution to find median.  This is used in attempt to dynamically set xlim below.
                         prior_test_alpha + likelihood_test_alpha,
                         prior_test_beta + likelihood_test_beta)

median3 <- round(median(post_rbeta_control),2)
median4 <- round(median(post_rbeta_test),2)

post_comp<-data.frame(x = seq(0,1,length.out = 1e4)) %>%      # This graph compares control and test posterior distributions.
  mutate(control = map_dbl(x,fun_beta_control),
         test = map_dbl(x,fun_beta_test)) %>%
  pivot_longer(-x,names_to = "variant") %>%
  ggplot(aes(x = x,y = value)) +
  geom_ribbon(aes(fill = variant,xmin = x,xmax = x,ymin = 0,ymax = value),
              alpha = .75) +
  labs(x = "Expected Conversion Rate", y = "Density",
       title = "Posterior Probability of Conversion Rate",
       fill = NULL) +
  theme_bw() +
  theme(legend.position = 'bottom') +
  scale_x_continuous(limits = c(.425,.465),labels = percent_format())
post_comp  

## Simulation ##
n_trial <- 1e6
set.seed(123)
sample_control <- rbeta(n_trial,                                        # Take random simulated values from control posterior distribution
                        prior_control_alpha + likelihood_control_alpha,
                        prior_control_beta + likelihood_control_beta)
sample_test <- rbeta(n_trial,                                           # Take random simulated values from control posterior distribution
                     prior_test_alpha + likelihood_test_alpha,
                     prior_test_beta + likelihood_test_beta)

## Posterior Distribution Comparison ##
superior_prob <- sum(sample_test > sample_control) / n_trial          # To find the probability that one version will perform better than the other, sum number of occurrences in which one version is better and divide by total trials.
superior_prob

sample_diff <- (sample_test - sample_control) / sample_control        # Calculation of improvement of one version over the other.
median(sample_diff)

dens_diff <- density(sample_diff)                                     # Finding the density in order to graph distribution of improvement 
df_diff <- data.frame(x = dens_diff$x,y = dens_diff$y)

o <- df_diff %>%
  mutate(type = ifelse(x < 0, 'full', 'part'))

p <- ggplot(o,aes(x,y,fill = type)) +
  geom_ribbon(aes(xmin = x,xmax = x,ymin = 0, ymax = y),
              alpha = .75) +
  scale_fill_manual(labels = c(paste("control:",percent(1 - superior_prob,.01)),
                               paste("test:",percent(superior_prob,.01))),
                    values = c("#F8766D","#00BFC4")) +
  scale_x_continuous(labels = label_percent(accuracy = .01)) +
  theme_bw() +
  theme(legend.position = 'bottom',legend.title = element_blank()) +
  labs(title = "Likelihood to Perform Better",
       x = "(A-B)/B", y = "Density")

q <- df_diff %>%                                                # Creating 3 subsets based on where data falls in relation to quartiles
  mutate(type = 
           ifelse(x < quantile(sample_diff,probs = .005),
                  "out",
                  ifelse(x > quantile(sample_diff,probs = .995), 
                         "out2", 
                         "in")))

cat<-q%>%filter(type == "in")
dog<-q%>%filter(type == "out")
wolf<-q%>%filter(type == "out2")

r<-ggplot(NULL,aes(x,y, fill = type)) +
  geom_ribbon(data = dog,aes(xmin = x, xmax =x , ymin = 0, ymax =  y),
              alpha = 0.75) +
  geom_ribbon(data = cat,aes(xmin = x, xmax =x , ymin = 0, ymax =  y),
              alpha = 0.75) +
  geom_ribbon(data = wolf,aes(xmin = x, xmax =x , ymin = 0, ymax =  y),
              alpha = 0.75, fill = "#00BFC4") +
  theme_bw() +
  theme(legend.position = 'bottom',legend.title = element_blank()) +
  labs(title = "99% Credible Interval and Mean for Improvement",
       x = "Improvement Rate", y = "Density") +
  scale_x_continuous(labels = label_percent(accuracy = .01)) +
  geom_vline(xintercept = quantile(sample_diff,probs = .005),
             linetype = 3,
             lwd = 1) +
  annotate("text",
           x = -.032,
           y = quantile(q$y,probs = .75),
           label = percent(quantile(sample_diff,probs = .005),accuracy = .01),
           size = 5) +
  geom_vline(xintercept = quantile(sample_diff,probs = .995), 
             linetype = 3, 
             lwd = 1) +
  annotate("text",
           x = .056,
           y = quantile(q$y,probs = .75),
           label = percent(quantile(sample_diff,probs = .995),accuracy = .01),
           size = 5) + 
  geom_vline(xintercept = median(sample_diff), 
             linetype = 3, 
             lwd = 1) +
  annotate("text",
           x = .02,
           y = quantile(q$y,probs = .75),
           label = percent(median(sample_diff),accuracy = .01),
           size = 5)

con <- function(n_trial) dbeta(n_trial,prior_control_alpha + likelihood_control_alpha,prior_control_beta + likelihood_control_beta)  # Creation of beta distribution density of control
t <- function(n_trial) dbeta(n_trial,prior_test_alpha + likelihood_test_alpha,prior_test_beta + likelihood_test_beta)   # Creation of beta distribution density of test

msample_control <- mean(sample_control)
msample_test <- mean(sample_test)


q2 <- function(msample_control,msample_test)         # Function that selects distribution of winning variation
{ifelse(mean(sample_control) > mean(sample_test),
        return(as.numeric(sample_control)),
        return(as.numeric(sample_test)))}
q2 <- q2(msample_control,msample_test)

dens <- density(q2)                             # Calculates the density of the rbeta samples for the distribution that performs better
df_dens <- data.frame(x = dens$x, y = dens$y)   # Changes dens into a dataframe

zed <- df_dens %>%                              # Creates subsets of data based on where data falls in the quantiles
  mutate(type = 
           ifelse(x < quantile(q2,probs = .005),
                  "out",
                  ifelse(x > quantile(q2,probs = .995), 
                         "out2", 
                         "in")))

elephant <- zed%>%filter(type == "in")
lemur <- zed%>%filter(type == "out")
monkey <- zed%>%filter(type == "out2")

median5 <- round(median(q2),2)               # median is calculated here in attempt to dynamically set xlim in graph below

s <- ggplot(NULL, aes(x,y,fill = type)) +   # This graph is the posterior distribution of the winning variation with Conversion Rate as the x-axis
  geom_ribbon(data = lemur,aes(xmin = x,xmax = x,ymin = 0,ymax = y),
              alpha = .75) +
  geom_ribbon(data = elephant,aes(xmin = x,xmax = x,ymin = 0,ymax = y),
              alpha = .75) +
  geom_ribbon(data = monkey,aes(xmin = x,xmax = x,ymin = 0,ymax = y),
              alpha = .75, fill = "#00BFC4") +
  theme_bw() +
  theme(legend.position = 'bottom',legend.title = element_blank()) +
  labs(title = "99% Credible Interval and Mean for Conversion Rate of Better Performing Variation",
       x = "Conversion Rate", y = "Density") +
  scale_x_continuous(limits = c(median5 - .02,median5 + .02),
                     breaks = seq(median5 - .02, median5 + .02,.01),
                     labels = label_percent()) +
  geom_vline(xintercept = quantile(q2,probs = .005),
             linetype = 3,
             lwd = 1) +
  annotate("text",
           x = .434,
           y = quantile(zed$y,probs = .75),
           label = percent(quantile(q2,probs = .005),accuracy = .01),
           size = 5) +
  geom_vline(xintercept = quantile(q2,probs = .995), 
             linetype = 3, 
             lwd = 1) +
  annotate("text",
           x = .4615,
           y = quantile(zed$y,probs = .75),
           label = percent(quantile(q2,probs = .995),accuracy = .01),
           size = 5) + 
  geom_vline(xintercept = median(q2), 
             linetype = 3, 
             lwd = 1) +
  annotate("text",
           x = .445 ,
           y = quantile(zed$y,probs = .8),
           label = percent(median(q2),accuracy = .01),
           size = 5)


## Absolute Potential Loss for variations ##
control_PL <- mean(ifelse(sample_test - sample_control < 0,
                          0,
                          sample_test - sample_control))

test_PL <- mean(ifelse(sample_control - sample_test < 0,
                       0,
                       sample_control - sample_test))

## Winner Declaration ##
control_dec <- function(superior_prob,control_conversions,test_conversions,control_total_visits,test_total_visits) {
  TOC <<- (control_conversions / (control_total_visits + test_total_visits)) * .0075 * 100
  k <- ifelse(control_conversions >= 25
              & test_conversions >= 25
              & control_total_visits + test_total_visits > 1500
              & 1 - superior_prob >= .95
              & control_PL < TOC,
              "WINNING VARIATION",
              "NOT a winner")
  return(k)
}
c_dec <- control_dec(superior_prob,control_conversions,test_conversions,control_total_visits,test_total_visits)
c_dec

test_dec <- function(superior_prob,control_conversions,test_conversions,control_total_visits,test_total_visits) {
  TOC <<- (test_conversions / (control_total_visits + test_total_visits)) * .0075 * 100
  k <- ifelse(control_conversions >= 25
              & test_conversions >= 25
              & control_total_visits + test_total_visits > 1500
              & superior_prob >= .95
              & test_PL < TOC,
              "WINNING VARIATION",
              "NOT a winner")
  return(k)
}

t_dec <- test_dec(superior_prob,control_conversions,test_conversions,control_total_visits,test_total_visits)

df2 <- data.frame(Variation = c("Control","Test"),
                  Expected_Conversion_Rate = c(percent(median(sample_control),
                                                       accuracy = .01),
                                               percent(median(sample_test),
                                                       accuracy = .01)),
                  Improvement = c("Baseline",percent(median(sample_diff),.01)),
                  Credible_Interval = c("",
                                        paste(percent(quantile(sample_diff,probs = .005),accuracy = .01),
                                              "to",
                                              percent(quantile(sample_diff,probs = .995),accuracy = .01))),
                  Probability_to_be_Best = c(percent(1 - superior_prob,.01),percent(superior_prob,.01)),
                  Potential_Loss = c(percent(control_PL,.01),percent(test_PL,.01)),
                  End_Result = c(c_dec,t_dec))


################### DATA OUTPUT #############################################################
#############################################################################################

##  Data ##                                                                                    
df
df2

## Prior Distribution Graphs ##                                                                
grid.arrange(a,b,nrow = 1,ncol = 2)                                                         

## Likelihood Distribution Graphs ##                                                            
grid.arrange(m,n,nrow = 1, ncol = 2)                                                        

## Posterior Comparison Graphs ##                                                              
post_comp                                                                                   
p                                                                                           
r                                                                                           
s                                                                                           
median(sample_diff)

## Posterior Results ##                                                                       
paste("Probability that test will perform better than the control:",round(superior_prob,4)) 
paste("Median improvement of test over control:",round(median(sample_diff),4))              

quantile(sample_control,probs = c(.005,.995))                                               
quantile(sample_test,probs = c(.005,.995))                                                  
quantile(sample_diff,probs = c(.005,.995))

################### Data Output ############################################################# 
